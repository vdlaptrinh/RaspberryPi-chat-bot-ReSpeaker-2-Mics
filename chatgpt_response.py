import time
import subprocess, os
import logging
import random
from openai import OpenAI
from text_to_speech import text_to_speech
from config import OPENAI_ASSISTANT_ID
from config import OPENAI_API_KEY

# Enter your Assistant ID here.
ASSISTANT_ID = OPENAI_ASSISTANT_ID
CHATGPT_API_KEY = OPENAI_API_KEY
# Make sure your API key is set as an environment variable.
client = OpenAI(api_key=CHATGPT_API_KEY)
# Set up logging
logging.basicConfig(level=logging.INFO)
filename = "respond.mp3"
def play(filename):
  #playsound.playsound(filename)
  subprocess.call(["ffplay", "-nodisp", "-autoexit", filename])
  os.remove(filename)

def chatgpt_response(input_text):
    #print(f"{Lib.GREEN_COLOR} ƒê√¢y l√† vƒÉn b·∫£n text truy·ªÅn v√†o: {input_text} {Lib.RESET_COLOR}")
    
    # T·∫°o m·ªôt thread v·ªõi th√¥ng ƒëi·ªáp c·ªßa ng∆∞·ªùi d√πng
    try:
        thread = client.beta.threads.create(
            messages=[{
                "role": "user",
                "content": input_text,
            }]
        )
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o thread: {e}")
        return "C√≥ l·ªói x·∫£y ra khi t·∫°o thread. Vui l√≤ng th·ª≠ l·∫°i sau."

    # T·∫°o v√† g·ª≠i run cho assistant
    try:
        run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o run: {e}")
        return "C√≥ l·ªói x·∫£y ra khi t·∫°o run. Vui l√≤ng th·ª≠ l·∫°i sau."
    
    # Ch·ªù cho ƒë·∫øn khi run ho√†n th√†nh (v·ªõi c∆° ch·∫ø backoff)
    max_retries = 30
    retries = 0
    while run.status != "completed" and retries < max_retries:
        try:
            run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        except Exception as e:
            logging.error(f"L·ªói khi truy v·∫•n tr·∫°ng th√°i run: {e}")
            retries += 1
            backoff_time = random.uniform(1, 3) * (2 ** retries)  # Exponential backoff
            logging.info(f"ƒêang th·ª≠ l·∫°i sau {backoff_time:.2f} gi√¢y...")
            time.sleep(backoff_time)
            continue
        
        retries += 1
        if retries == 10:
            #led.rainbow_cycle(0.001)
            speech = "B·∫°n ch·ªù ma ma 1 t√≠ nh√©"
            text_to_speech(speech, filename)
            play(filename)
        logging.info(f"üèÉ Tr·∫°ng th√°i run: {run.status}")
        if retries >= max_retries:
            logging.error("Kh√¥ng th·ªÉ ho√†n th√†nh run sau nhi·ªÅu l·∫ßn th·ª≠.")
            return "Qu√° tr√¨nh y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau."
    
    # Khi run ho√†n th√†nh, l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ thread
    try:
        message_response = client.beta.threads.messages.list(thread_id=thread.id)
        messages = message_response.data
        latest_message = messages[0]
        answer_text = latest_message.content[0].text.value
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y ph·∫£n h·ªìi: {e}")
        return "C√≥ l·ªói khi l·∫•y ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau."
    
    return answer_text

